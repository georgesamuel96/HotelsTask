<resources>
    <string name="app_name">DubaiHotels</string>
    <string name="error">error</string>
    <string name="placeholder">place holder</string>
    <string name="camera_settings">Camera Setting</string>
    <string name="camera_value">Camera</string>
    <string name="upload">Upload</string>
    <string name="discard">Discard</string>
    <string name="settings">Settings</string>
    <string name="singapore">Singapore</string>
    <string name="camera">Camera</string>
    <string name="show_snack_bar">Show Snack Bar</string>
    <string name="button_open_collapse">Open Collapse Screen</string>
    <string name="button_un_elevated">Un Elevated</string>
    <string name="button_label_enabled">Label Enabled</string>
    <string name="button_label_disabled">Label Disabled</string>
    <string name="outlined_button_label_enabled">OutLine Button Label Enabled</string>
    <string name="text_button_label_enabled">Text Button Label Enabled</string>
    <string name="icon_button_label_enabled">Icon Button Label Enabled</string>
    <string name="text_main_content">BottomSheetBehavior works in tandem with CoordinatorLayout to let you display content on a Bottom sheet (a layer on top of the main content), perform enter/exit animations, respond to dragging/swiping gestures, etc.

Bottom sheets have 5 states:

STATE_COLLAPSED: The bottom sheet is visible but only showing its peek height. This state is usually the ‘resting position’ of a Bottom Sheet. The peek height is chosen by the developer and should be enough to indicate there is extra content, allow the user to trigger an action or expand the bottom sheet.
STATE_EXPANDED: The bottom sheet is visible and its maximum height and it is neither dragging or settling (see below).
STATE_DRAGGING: The user is actively dragging the bottom sheet up or down.
STATE_SETTLING: The bottom sheet is settling to specific height after a drag/swipe gesture. This will be the peek height, expanded height, or 0, in case the user action caused the bottom sheet to hide.
STATE_HIDDEN: The bottom sheet is no longer visible.
If you’re already using CoordinatorLayout for your activity, adding a bottom sheet is trivial:

Add any View as a direct child of CoordinatorLayout.
Apply the behavior by adding the following xml attribute app:layout_behavior="com.google.android.material.bottomsheet.BottomSheetBehavior"
Set the desired behavior flags
app:behavior_hideable whether this bottom sheet can be hidden by dragging it down.
app:behavior_peekHeight the peek height for the collapsed state.
app:behavior_skipCollapsed if the bottom sheet is hideable, and this is set to true, it does not have a collapsed state.
To programmatically control the bottom sheet you can call the setState method on the BottomSheetBehavior</string>
</resources>
